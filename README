-Descrizione:
-Create un nuovo progetto React (con Vite) e definite i componenti necessari per strutturare il   layout come da screenshot allegato.

-Per oggi diamo priorità alla struttura: quando è tutto bello solido, passiamo al CSS!

-Note: - Il font utilizzato è Open SansBonus:

-Bonus:
-Creare un componente aggiuntivo per gestire la fascia azzurra con le icone.

<!-- ///////////////////////  PRIMA PARTE CON I PROPS   //////////////////////////// -->
<!-- PROCEDIMENTO -->
1) Vite e un tool che ci permette di semplificare alcuni passaggi e rendere uno sviluppo piu rapido, come ad esempio crea gia le cartelle del progetto dove inizialliza gia con npm init
    -Trasforma i file jsx e scss gia compatibili con il browser
    -Non bisogna mettere gli script per lo start e il watch
    -E permette di avviare con (npm run dev) il server locale

2) Installiamo VITE con {npm create vite@latest} => Dove a sua volta ci fara una serie di domande come il framework che vogliamo utilizzare e js. Infine installiamo tutte le altre dipendeze con npm install e avviamo il server.

3) Aggiungo la cartella imgs dentro i file statici---- Aggiungo la cartella components dove all interno andranno l Header, Main, Footer 

4) React e un framework di Js dove ci facilita il lavoro, permettendoci di fare in un unico file JSX sia la parte di html e Js 
    -Ogni applicazione React è composta da componenti riutilizzabili-------(App.jsx) è il componente radice dell'applicazione
    -ESPORTAZIONE export default function Header()
    -IMPORTAZIONE import Header from "./components/Header";

5) Ho creato i tre file JSX con header , main e footer
    - E li importo sull app principale


<!-- ///////////////////////  SECONDA PARTE CON I PROPS   //////////////////////////// -->

1) Le Props serveno per passare un dato da un componente genitore a un componente figlio
    -Le props vengono trasmesse tramite gli attributi HTML 

2) Le Conditional Rendering in JSX sarebbero le condizioni (if..else che usavamo su js ), ma su jsx si usa lo short-circuiting con (and e or) --- Operatori ternari
    -Inoltre possiamo utilizzare questi operatori anche per aggiungere o rimuovere una classe active di un elemento CSS

3) Lavorare con gli Array in JSX 



<!-- ESERCIZIO -->
Descrizione:
Continuate a lavorare nella stessa repo di ieri, creando un array di link nell’header e sfruttandolo in maniera dinamica.
    -Una volta fatto, provate a centralizzare i dati in App.jsx e a passarli come prop.
    
------Bonus----------------
    -scorporate la parte dell’header con il menù in un componente a parte (ora i dati del menù dovranno fare un passaggio in più…);
    -Creare un array di dati anche per i link nel footer e cercare di dinamicizzare anche quelli all’interno dei componenti della vostra app.


1) Ho fatto solo la prova facendo un logo in un altro file jsx e importando nell header (L ho fatto in caso mi servisse lo stesso logo piu volte)

2) Ho fatto un altro file jsx per rendere il tutto piu ordinato con l array dei link poi la vado a importare sull header

3) Poi per fare il props drilling vado a prendere l array di oggetti da NavHeader e do un parametro (props) e do props.link etc..---- poi prendo quello array da navheader e la metto in App ora do ad header una proprieta link={nome ARRAY} cosi va a prendere l array---- poi do <NavHeader linkSecond={props.link}/>==== poi vado in navheader e gli dico props.linkSecond

4) Condizione per <a> className={link.current ? 'active' : ''} gli dico se current e vero mi metti active altrimenti niente



<!-- ///////////////////////  TERZA PARTE CON I PROPS   //////////////////////////// -->

<!-- ESERCIZIO -->

Descrizione:

1) Continuate a lavorare nella stessa repo di ieri e create un nuovo componente riutilizzabile per visualizzare le card dei fumetti, sfruttando l’array di oggetti in allegato.

2) Fate in modo che il componente Card riceva le props dal componente Listato, che genererà le istanze di Card, come fatto al mattino insieme.

3) Una volta inseriti tutti i contenuti dinamicamente, completate il vostro layout e rifinite i dettagli col CSS.Nota: Le immagini potrebbero variare leggermente rispetto a quelle nello screenshot.

<!-- PROCEDIMENTO -->

----> 1 METODO

1) Creo file (ProductList.jsx) e importo l array di oggetti. Faccio l export della funzione ProductList.jsx----> faccio poi il return del contenuto html preso dal main e, uso il map per ciclare l array di oggetti e crearne uno nuovo poi scrivo il contenuto all interno, prendendo gli elementi degli oggetti dall elemento iesimo ricavando img  e il contenuto.


----> 2 METODO

2) Faccio la stessa cosa di prima ma divido ancora di piu il tutto usando le props e lasciando nel file (ProductList.jsx) solo il map dell array e il contenuto importato da un altro file chiamato (ProductCard.jsx), dove all interno avremo il contenuto html che pero va a prendere le proprieta dell oggetto attraverso il paramentro delle props